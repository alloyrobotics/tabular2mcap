[project]
name = "tabular2mcap"
version = "0.1.2"
description = "Convert tabular CSV data to MCAP format with support for ROS2 and JSON schemas"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "jinja2>=3.0.0",
    "mcap>=1.3.0",
    "mcap-ros1-support>=0.7.3",
    "mcap-ros2-support>=0.5.5",
    "pandas>=2.3.3",
    "pyarrow>=21.0.0",
    "pydantic>=2.12.0",
    "scipy>=1.15.3",
    "tqdm>=4.67.1",
    "av>=16.0.1",
    "opencv-python>=4.12.0.88",
    "platformdirs>=4.5.0",
]

[tool.uv]
package = true

[project.scripts]
tabular2mcap = "tabular2mcap:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-cov>=6.0.0",
    "ruff>=0.8.0",
    "mypy>=1.11.0",
    "pre-commit>=4.0.0",
    "twine>=6.2.0",
]


[tool.setuptools.packages.find]
include = ["tabular2mcap*"]
exclude = ["MCAPOutput*", "Alloy Data*"]

[tool.setuptools.package-data]
tabular2mcap = ["external/foxglove-sdk/schemas/**/*"]

[tool.ruff]
line-length = 88
target-version = "py310"
extend-exclude = [
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".tox",
    ".venv",
    "build",
    "dist",
    "__pycache__",
]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "SIM",   # flake8-simplify
    "C4",    # flake8-comprehensions
    "RUF",   # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by formatter, strings are OK to be long)
    "N817",  # CamelCase imported as acronym (allow Rotation as R - scipy convention)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = [
    "-s",
    "-v",
    "--strict-markers",
    "--tb=short",
    "--log-cli-level=INFO",
    "--log-cli-format=%(levelname)s: %(message)s",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(levelname)s: %(message)s"
log_file = "tests/test_output.log"
log_file_level = "INFO"
