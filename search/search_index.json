{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tabular2MCAP","text":"<p>Convert tabular data (CSV, Parquet) to MCAP format with support for ROS2 and JSON schemas, enabling seamless integration with robotics workflows, data visualization in Foxglove Studio, and playback of sensor and navigation data.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Multi-Format Support: Convert to ROS2 or JSON messages with support for standard message types (e.g., <code>sensor_msgs/msg/NavSatFix</code>, <code>geometry_msgs/msg/TransformStamped</code>, <code>foxglove.LocationFix</code>, and more)</li> <li>Configuration-Driven: YAML-based mapping with Jinja2 templates for flexible data transformation</li> <li>Batch Processing: Process multiple files and directories with a single command</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install tabular2mcap\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>tabular2mcap \\\n  -i /path/to/data/directory \\\n  -o output.mcap \\\n  -c config.yaml \\\n  -f converter_functions.yaml\n</code></pre>"},{"location":"#configuration-system","title":"Configuration System","text":"<p>The tool uses YAML configuration files to define how CSV files should be processed. These are:</p> <ul> <li><code>config.yaml</code>: Defines file patterns and converter function mappings</li> <li><code>converter_functions.yaml</code>: Contains Jinja2 templates for data transformation</li> </ul>"},{"location":"#example-configurations","title":"Example Configurations","text":"<p>JSON Format: <pre><code># config.yaml\nwriter_format: \"json\"\nfile_mappings:\n  - file_pattern: 'data.csv'\n    converter_functions:\n      - function_name: \"row_to_foxglove_location_fix\"\n        schema_name: \"foxglove.LocationFix\"\n        topic_suffix: \"LocationFix\"\n</code></pre></p> <p>ROS2 Format: <pre><code># config.yaml\nwriter_format: \"ros2\"\ntabular_mappings:\n  - file_pattern: '**/data.csv'\n    converter_functions:\n      - function_name: \"row_to_nav_sat_fix\"\n        schema_name: \"sensor_msgs/msg/NavSatFix\"\n        topic_suffix: \"NavSatFix\"\n</code></pre></p>"},{"location":"#tutorial","title":"Tutorial","text":"<p>For detailed instructions on adding support for new types of CSV data, see the Tutorial in the documentation.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for contributing! Here's how to get started.</p>"},{"location":"contributing/#setup","title":"Setup","text":"<pre><code># Install dependencies\nuv sync --group dev\n\n# Install pre-commit hooks\nuv run pre-commit install\n</code></pre>"},{"location":"contributing/#development","title":"Development","text":""},{"location":"contributing/#tests","title":"Tests","text":"<pre><code>uv run pytest                    # Run all tests\nuv run pytest --cov=tabular2mcap # With coverage\n</code></pre>"},{"location":"contributing/#linting-formatting","title":"Linting &amp; Formatting","text":"<pre><code>uv run ruff check . --fix        # Lint and auto-fix\nuv run ruff format .             # Format code\n</code></pre>"},{"location":"contributing/#type-checking-optional","title":"Type Checking (optional)","text":"<pre><code>uv run mypy tabular2mcap/ --ignore-missing-imports\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<pre><code>uv sync --group docs             # Install docs dependencies\nuv run mkdocs serve              # Preview at localhost:8000\n</code></pre>"},{"location":"contributing/#foxglove-json-schema-updates","title":"Foxglove JSON Schema Updates","text":"<p>JSON schemas are included in the repo to avoid download caching. To update to the latest version: <pre><code>cd tabular2mcap/external\nuv run python update_foxglove_schema.py\n</code></pre></p>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork the repository and create a feature branch</li> <li>Make changes following the code style below</li> <li>Add tests for new features</li> <li>Run <code>ruff check . --fix &amp;&amp; ruff format .</code></li> <li>Push and open a PR with a clear description</li> </ol>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Line length: 88 characters</li> <li>Quotes: Double quotes</li> <li>Imports: Auto-sorted by Ruff</li> <li>Type hints: Encouraged</li> </ul>"},{"location":"contributing/#ci-requirements","title":"CI Requirements","text":"<p>PRs must pass:</p> <ul> <li>\u2705 Ruff linting and formatting</li> <li>\u2705 Tests on Python 3.10, 3.11, 3.12</li> <li>\u2705 Tests on Ubuntu, macOS, Windows</li> </ul>"},{"location":"contributing/#questions","title":"Questions?","text":"<p>Open an issue if you need help!</p>"},{"location":"tutorial/","title":"Tutorial: Setting up the config to convert CSV to MCAP","text":"<p>Learn how to create configuration files that convert your CSV data to MCAP format.</p>"},{"location":"tutorial/#step-1-analyze-your-csv-data","title":"Step 1: Analyze Your CSV Data","text":"<p>Suppose you have data from a wheeled robot with GPS, sensor readings, and camera:</p> <pre><code>data/\n\u251c\u2500\u2500 location.csv        # contains headers timestamp_sec, latitude, longitude, altitude, latitude_error, longitude_error, altitude_error\n\u251c\u2500\u2500 sensor.csv          # contains headers timestamp_sec, pressure1, pressure2, sensor3, sensor4\n\u251c\u2500\u2500 video.mp4\n\u251c\u2500\u2500 attachment1.txt\n\u2514\u2500\u2500 attachment2.txt\n</code></pre>"},{"location":"tutorial/#step-2-create-configuration-file","title":"Step 2: Create Configuration File","text":"<p>Map your CSV files to MCAP topics and message types using <code>config.yaml</code>:</p> <pre><code># config.yaml\nwriter_format: \"json\"\n\ntabular_mappings:\n  - file_pattern: \"location.csv\"\n    converter_functions:\n      - function_name: \"row_to_location_fix\"\n        schema_name: \"foxglove.LocationFix\"\n        topic_suffix: \"LocationFix\"\n\n  - file_pattern: \"sensor.csv\"\n    converter_functions:\n      - function_name: \"row_to_timestamp\"\n        schema_name: null\n        topic_suffix: \"Data\"\n        exclude_columns:\n        # Exclude timestamp_sec; all other columns (pressure1, pressure2, sensor3, sensor4) are included\n        - \"timestamp_sec\"\n\n# Optional: Add attachments and metadata\nattachments:\n  - file_pattern: \"attachment*.txt\"\n    exclude_file_pattern: '(attachment2).txt'  # Excludes attachment2.txt, attaches only attachment1.txt\n\nmetadata:\n  - file_pattern: \"attachment2.txt\"\n    separator: \":\"\n</code></pre>"},{"location":"tutorial/#step-3-create-converter-functions","title":"Step 3: Create Converter Functions","text":"<p>Define Jinja2 templates in <code>converter_functions.yaml</code> to transform CSV rows into messages. Use <code>| int</code> and <code>| float</code> filters for type conversion.</p> <pre><code># converter_functions.yaml\nfunctions:\n  row_to_location_fix:\n    description: \"Convert GPS coordinates to Foxglove LocationFix\"\n    template: |\n      {\n        \"timestamp\": {\n          \"sec\": {{ timestamp_sec | int }},\n          \"nsec\": {{ ((timestamp_sec % 1) * 1_000_000_000) | int }}\n        },\n        \"frame_id\": \"gps\",\n        \"latitude\": {{ latitude | float }},\n        \"longitude\": {{ longitude | float }},\n        \"altitude\": {{ altitude | float }},\n        \"position_covariance\": [\n          {{ (latitude_error or 0) ** 2 }},\n          0, 0,\n          0,\n          {{ (longitude_error or 0) ** 2 }},\n          0,\n          0, 0,\n          {{ (altitude_error or 0) ** 2 }}\n        ],\n        \"position_covariance_type\": 2\n      }\n\n  row_to_timestamp:\n    description: \"Convert timestamp\"\n    template: |\n      {\n        \"timestamp\": {\n          \"sec\": {{ timestamp_sec | int }},\n          \"nsec\": {{ ((timestamp_sec % 1) * 1_000_000_000) | int }}\n        },\n      }\n</code></pre>"},{"location":"tutorial/#step-4-run-the-conversion","title":"Step 4: Run the Conversion","text":"<pre><code># Basic conversion\ntabular2mcap -i /path/to/data/directory -o output.mcap -c config.yaml -f converter_functions.yaml\n\n# With topic prefix and test mode\ntabular2mcap -i /path/to/data/directory -o output.mcap -c config.yaml -f converter_functions.yaml -t \"my_robot/\" --test-mode\n</code></pre>"},{"location":"tutorial/#step-5-validate-output","title":"Step 5: Validate Output","text":"<p>Open your generated MCAP file in Foxglove Studio to verify the conversion.</p>"},{"location":"tutorial/#troubleshooting","title":"Troubleshooting","text":"<ol> <li>Column name issues: The tool automatically sanitizes column names by replacing spaces with <code>_</code> and removing special characters</li> <li>Data type conversion: Use Jinja2 filters like <code>| float</code>, <code>| int</code>, <code>| tojson</code> for proper type conversion</li> <li>Missing data: Use <code>&lt;column_name&gt; or 0</code> filter to handle missing values</li> </ol>"},{"location":"api/converter/","title":"Converter Modules","text":"<p>Internal converter modules for different message formats.</p>"},{"location":"api/converter/#tabular2mcap.converter.json","title":"<code>tabular2mcap.converter.json</code>","text":"<p>JSON converter utilities for MCAP writing.</p>"},{"location":"api/converter/#tabular2mcap.converter.json.register_foxglove_schema","title":"<code>register_foxglove_schema(writer, schema_name)</code>","text":"<p>Register a Foxglove schema with the MCAP writer.</p> <p>Parameters:</p> Name Type Description Default <code>writer</code> <code>Writer</code> <p>MCAP writer instance</p> required <code>schema_name</code> <code>str</code> <p>Name of the Foxglove schema (e.g., \"LocationFix\")</p> required <p>Returns:</p> Type Description <code>int</code> <p>Schema ID for use in channel registration</p>"},{"location":"api/converter/#tabular2mcap.converter.json.register_json_schema_from_columns","title":"<code>register_json_schema_from_columns(writer, schema_name, columns)</code>","text":"<p>Create and register a JSON schema from column names and their dtypes.</p> <p>Parameters:</p> Name Type Description Default <code>writer</code> <code>Writer</code> <p>MCAP writer instance</p> required <code>schema_name</code> <code>str</code> <p>Name of the schema (e.g., \"LocationFix\")</p> required <code>columns</code> <code>list[tuple[str, Any]]</code> <p>List of (key, dtype) tuples for schema generation</p> required <p>Returns:</p> Type Description <code>int</code> <p>Schema ID that was registered</p>"},{"location":"api/converter/#tabular2mcap.converter.json.register_schema","title":"<code>register_schema(writer, schema_name)</code>","text":"<p>Register schema and return schema ID and conversion function.</p> <p>Parameters:</p> Name Type Description Default <code>writer</code> <code>Writer</code> <p>MCAP writer instance</p> required <code>schema_name</code> <code>str</code> <p>Name of the schema (e.g., \"LocationFix\" for Foxglove)</p> required <p>Returns:</p> Type Description <code>int</code> <p>Tuple of (schema_id, convert_row_function)</p>"},{"location":"api/converter/#tabular2mcap.converter.json.write_messages_from_iterator","title":"<code>write_messages_from_iterator(writer, iterator, topic_name, schema_id, data_length=None, unit='msg')</code>","text":"<p>Write messages from a DataFrame with flexible conversion options.</p> <p>This function can handle both Foxglove-specific schemas and generic JSON schemas by using different conversion strategies.</p> <p>Parameters:</p> Name Type Description Default <code>writer</code> <code>Writer</code> <p>MCAP writer instance</p> required <code>iterator</code> <code>Iterable[tuple[int, dict]]</code> <p>Iterable of tuples containing the index and message</p> required <code>topic_name</code> <code>str</code> <p>Full topic name for the messages</p> required <code>schema_id</code> <code>int | None</code> <p>Schema ID from register_foxglove_schema</p> required"},{"location":"api/converter/#tabular2mcap.converter.ros2","title":"<code>tabular2mcap.converter.ros2</code>","text":""},{"location":"api/converter/#tabular2mcap.converter.ros2.numpy_to_ros2_type","title":"<code>numpy_to_ros2_type(dtype, sample_data=None)</code>","text":"<p>Convert numpy dtype to ROS2 type.</p>"},{"location":"api/converter/#tabular2mcap.converter.ros2.register_schema","title":"<code>register_schema(writer, schema_name)</code>","text":"<p>Register schema and return schema ID and conversion function.</p> <p>Parameters:</p> Name Type Description Default <code>writer</code> <code>Writer</code> <p>MCAP writer instance</p> required <code>schema_name</code> <code>str</code> <p>Name of the schema (e.g., \"LocationFix\" for Foxglove)</p> required <p>Returns:</p> Type Description <code>Schema</code> <p>Tuple of (schema_id, convert_row_function)</p>"},{"location":"api/converter/#tabular2mcap.converter.ros2.sanitize_ros2_field_name","title":"<code>sanitize_ros2_field_name(key)</code>","text":"<p>Convert string to valid ROS2 field name by removing invalid characters.</p>"},{"location":"api/converter/#tabular2mcap.converter.ros2.sanitize_schema_name","title":"<code>sanitize_schema_name(schema_name)</code>","text":"<p>Convert string to valid ROS2 schema name by removing invalid characters.</p>"},{"location":"api/converter/#tabular2mcap.converter.ros2.write_messages_from_iterator","title":"<code>write_messages_from_iterator(writer, iterator, topic_name, schema_id, data_length=None, unit='msg')</code>","text":"<p>Write messages from an iterator.</p>"},{"location":"api/converter/#tabular2mcap.converter.functions","title":"<code>tabular2mcap.converter.functions</code>","text":""},{"location":"api/converter/#tabular2mcap.converter.functions.ConverterFunction","title":"<code>ConverterFunction</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/converter/#tabular2mcap.converter.functions.ConverterFunction.convert_row","title":"<code>convert_row(row)</code>","text":"<p>Convert a pandas row using the Jinja2 template.</p>"},{"location":"api/converter/#tabular2mcap.converter.functions.ConverterFunction.init_jinja2_template","title":"<code>init_jinja2_template()</code>","text":"<p>Initialize Jinja2 template and environment after model creation.</p>"},{"location":"api/converter/#tabular2mcap.converter.functions.ConverterFunctionJinja2Environment","title":"<code>ConverterFunctionJinja2Environment</code>","text":"<p>               Bases: <code>Environment</code></p> <p>Specialized Jinja2 environment for ConverterFunction that provides math functions, custom filters, and disables autoescape for JSON-like output.</p>"},{"location":"api/converter/#tabular2mcap.converter.others","title":"<code>tabular2mcap.converter.others</code>","text":""},{"location":"api/converter/#tabular2mcap.converter.others.compressed_image_message_iterator","title":"<code>compressed_image_message_iterator(video_frames, fps, format, frame_id)</code>","text":"<p>Generate compressed image messages from video frames.</p>"},{"location":"api/converter/#tabular2mcap.converter.others.compressed_video_message_iterator","title":"<code>compressed_video_message_iterator(video_frames, fps, format, frame_id)</code>","text":"<p>Generate compressed video messages from video frames.</p>"},{"location":"api/loader/","title":"Data Models","text":"<p>Pydantic models for configuration and converter functions.</p>"},{"location":"api/loader/#tabular2mcap.loader.models","title":"<code>tabular2mcap.loader.models</code>","text":""},{"location":"api/main/","title":"Main API","text":"<p>High-level functions for converting tabular data to MCAP format.</p>"},{"location":"api/main/#architecture","title":"Architecture","text":"<p>The conversion process uses three main components:</p> <ol> <li><code>loader</code> - Loads data and configuration files</li> <li><code>schemas</code> - Manages and writes message schemas to MCAP</li> <li><code>converter</code> - Transforms data into the target message format (JSON or ROS2)</li> </ol>"},{"location":"api/main/#tabular2mcap.convert_tabular_to_mcap","title":"<code>tabular2mcap.convert_tabular_to_mcap(input_path, output_path, config_path, topic_prefix, converter_functions_path, test_mode=False)</code>","text":"<p>Convert tabular and multimedia data to MCAP format.</p> <p>This is a convenience wrapper around the McapConverter class. For more control, use McapConverter directly.</p> <p>Parameters:</p> Name Type Description Default <code>input_path</code> <code>Path</code> <p>Path to the input directory containing tabular data files</p> required <code>output_path</code> <code>Path</code> <p>Path to the output MCAP file</p> required <code>config_path</code> <code>Path</code> <p>Path to the config file</p> required <code>topic_prefix</code> <code>str</code> <p>Optional prefix to prepend to all topic names in the generated MCAP file</p> required <code>converter_functions_path</code> <code>Path</code> <p>Path to the converter functions YAML file</p> required <code>test_mode</code> <code>bool</code> <p>Test mode: only process the first 5 rows of each CSV file</p> <code>False</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/main/#tabular2mcap.McapConverter","title":"<code>tabular2mcap.McapConverter</code>","text":"<p>Main class for converting tabular and multimedia data to MCAP format.</p>"},{"location":"api/main/#tabular2mcap.McapConverter.__init__","title":"<code>__init__(config_path, converter_functions_path)</code>","text":"<p>Initialize the MCAP converter.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>Path</code> <p>Path to the configuration file</p> required <code>converter_functions_path</code> <code>Path</code> <p>Path to the converter functions file</p> required"},{"location":"api/main/#tabular2mcap.McapConverter.convert","title":"<code>convert(input_path, output_path, topic_prefix='', test_mode=False)</code>","text":"<p>Convert tabular and multimedia data to MCAP format.</p> <p>Parameters:</p> Name Type Description Default <code>input_path</code> <code>Path</code> <p>Path to the input directory</p> required <code>output_path</code> <code>Path</code> <p>Path to the output MCAP file</p> required <code>topic_prefix</code> <code>str</code> <p>Prefix for topic names</p> <code>''</code> <code>test_mode</code> <code>bool</code> <p>If True, limits data processing for testing</p> <code>False</code>"},{"location":"api/schemas/","title":"Schema Management","text":"<p>Manages JSON schemas and ROS2 message definitions.</p>"},{"location":"api/schemas/#tabular2mcap.schemas.jsonschema","title":"<code>tabular2mcap.schemas.jsonschema</code>","text":"<p>Foxglove schema utilities for accessing message definitions.</p>"},{"location":"api/schemas/#tabular2mcap.schemas.jsonschema.get_foxglove_jsonschema","title":"<code>get_foxglove_jsonschema(schema_name)</code>","text":"<p>Get a Foxglove schema by name.</p> <p>Parameters:</p> Name Type Description Default <code>schema_name</code> <code>str</code> <p>Name of the schema (e.g., 'LocationFix', 'Pose')</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>Bytes containing the schema definition</p>"},{"location":"api/schemas/#tabular2mcap.schemas.ros2msg","title":"<code>tabular2mcap.schemas.ros2msg</code>","text":""},{"location":"api/schemas/#tabular2mcap.schemas.cache","title":"<code>tabular2mcap.schemas.cache</code>","text":"<p>Script to download and cache ROS 2 message definitions from official repositories.</p> <p>This script downloads the following repositories for a specified ROS 2 distribution: - rcl_interfaces - common_interfaces - geometry2</p> <p>The downloaded files are cached in the user's cache directory to avoid re-downloading.</p>"},{"location":"api/schemas/#tabular2mcap.schemas.cache.download_and_cache_all_repos","title":"<code>download_and_cache_all_repos(distro='jazzy', cache_dir=None)</code>","text":"<p>Download and cache all ROS 2 message definition repositories.</p> <p>Parameters:</p> Name Type Description Default <code>distro</code> <code>str</code> <p>ROS 2 distribution name (default: \"jazzy\")</p> <code>'jazzy'</code> <code>cache_dir</code> <code>Path | None</code> <p>Cache directory path (default: uses platformdirs cache)</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if all repositories downloaded successfully, False otherwise</p>"},{"location":"api/schemas/#tabular2mcap.schemas.cache.download_and_cache_repository","title":"<code>download_and_cache_repository(repo_name, url, distro, cache_dir)</code>","text":"<p>Download and cache a single repository.</p> <p>Parameters:</p> Name Type Description Default <code>repo_name</code> <code>str</code> <p>Name of the repository</p> required <code>url</code> <code>str</code> <p>URL template for downloading (with {distro_str} placeholder)</p> required <code>distro</code> <code>str</code> <p>ROS 2 distribution name</p> required <code>cache_dir</code> <code>Path</code> <p>Cache directory path</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if successful, False otherwise</p>"},{"location":"api/schemas/#tabular2mcap.schemas.cache.download_file","title":"<code>download_file(url, destination)</code>","text":"<p>Download a file from URL to destination path.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to download from</p> required <code>destination</code> <code>Path</code> <p>Local path to save the file</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if download successful, False otherwise</p>"},{"location":"api/schemas/#tabular2mcap.schemas.cache.extract_zip","title":"<code>extract_zip(zip_path, extract_to)</code>","text":"<p>Extract a zip file to the specified directory.</p> <p>Parameters:</p> Name Type Description Default <code>zip_path</code> <code>Path</code> <p>Path to the zip file</p> required <code>extract_to</code> <code>Path</code> <p>Directory to extract to</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if extraction successful, False otherwise</p>"},{"location":"api/schemas/#tabular2mcap.schemas.cache.is_repository_cached","title":"<code>is_repository_cached(repo_name, distro, cache_dir)</code>","text":"<p>Check if a repository is already cached for the given distribution.</p> <p>Parameters:</p> Name Type Description Default <code>repo_name</code> <code>str</code> <p>Name of the repository</p> required <code>distro</code> <code>str</code> <p>ROS 2 distribution name</p> required <code>cache_dir</code> <code>Path</code> <p>Cache directory path</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if repository is cached, False otherwise</p>"},{"location":"api/schemas/#tabular2mcap.schemas.cache.list_cached_repositories","title":"<code>list_cached_repositories(cache_dir=None)</code>","text":"<p>List all cached repositories and their message file counts.</p> <p>Parameters:</p> Name Type Description Default <code>cache_dir</code> <code>Path | None</code> <p>Cache directory path (default: uses platformdirs cache)</p> <code>None</code>"}]}